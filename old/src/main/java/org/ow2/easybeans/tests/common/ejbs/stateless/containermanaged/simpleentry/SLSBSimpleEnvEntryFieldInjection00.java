/**
 * EasyBeans
 * Copyright (C) 2006 Bull S.A.S.
 * Contact: easybeans@ow2.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA
 *
 * --------------------------------------------------------------------------
 * $Id: SLSBSimpleEnvEntryFieldInjection00.java 5369 2010-02-24 14:58:19Z benoitf $
 * --------------------------------------------------------------------------
 */
package org.ow2.easybeans.tests.common.ejbs.stateless.containermanaged.simpleentry;

import static org.ow2.easybeans.tests.common.helper.ContextHelper.checkSimpleEntry;

import javax.annotation.Resource;
import javax.ejb.Remote;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;

import org.ow2.easybeans.tests.common.ejbs.base.ItfSimpleEnvEntry;

/**
 * This bean is used to test injection of simple environment entries.
 * @author Eduardo Studzinski Estima de Castro
 * @author Gisele Pinheiro Souza
 */
@Stateless(name="SLSBSimpleEnvEntryFieldInjection00")
@Remote({ItfSimpleEnvEntry.class})
public class SLSBSimpleEnvEntryFieldInjection00 implements ItfSimpleEnvEntry{

    /**
     * SessionContext.
     */
    @Resource
    private SessionContext sessionContext;

    /**
     * The default value must be injected by the container.
     */
    @Resource(name = "str00")
    private String strInjection;

    /**
     * The value will be injected by the container.
     */
    @Resource(name = "strWithDefaultValue")
    private String strWithDefaultValue = ENTRY_STRING;

    /**
     * The default value must be injected by the container.
     */
    @Resource(name = "chr00")
    private char chrInjection;

    /**
     * The default value must be injected by the container.
     */
    @Resource(name = "int00")
    private int intInjection;

    /**
     * The default value must be injected by the container.
     */
    @Resource(name = "bol00")
    private boolean bolInjection;

    /**
     * The default value must be injected by the container.
     */
    @Resource(name = "dbl00")
    private double dblInjection;

    /**
     * The default value must be injected by the container.
     */
    @Resource(name = "bte00")
    private byte bteInjection;

    /**
     * The default value must be injected by the container.
     */
    @Resource(name = "shr00")
    private short shrInjection;

    /**
     * The default value must be injected by the container.
     */
    @Resource(name = "lng00")
    private long lngInjection;

    /**
     * The default value must be injected by the container. The name must be generated by the container: class name/field name.
     */
    @Resource
    private float fltInjection;

    /**
     * Checks if a String was correctly injected, if the session context can be
     * used to access the entry and if the JNDI API can be used directly to
     * access an environment entry. Also, check if a default value remains if an
     * env-entry-value was not defined in the deployment descriptor. An
     * IllegalStateException is thrown if fails.
     */
    public void checkString00() {
        checkSimpleEntry(sessionContext, "str00", strInjection, ENTRY_STRING);

        if (!ENTRY_STRING.equals(strWithDefaultValue)) {
            throw new IllegalStateException("There is not a default value declared in the deployment descriptor, "
                    + "so the container should not override the value specified in the variable declaration.");
        }
    }

    /**
     * @see org.ow2.easybeans.tests.common.ejbs.base.ItfSimpleEnvEntry
     */
    @SuppressWarnings("boxing")
    public void checkCharacter00() {
        checkSimpleEntry(sessionContext, "chr00", chrInjection, ENTRY_CHARACTER);
    }

    /**
     * @see org.ow2.easybeans.tests.common.ejbs.base.ItfSimpleEnvEntry
     */
    @SuppressWarnings("boxing")
    public void checkInteger00() {
        checkSimpleEntry(sessionContext, "int00", intInjection, ENTRY_INTEGER);
    }

    /**
     * @see org.ow2.easybeans.tests.common.ejbs.base.ItfSimpleEnvEntry
     */
    @SuppressWarnings("boxing")
    public void checkBoolean00() {
        checkSimpleEntry(sessionContext, "bol00", bolInjection, ENTRY_BOOLEAN);
    }

    /**
     * @see org.ow2.easybeans.tests.common.ejbs.base.ItfSimpleEnvEntry
     */
    @SuppressWarnings("boxing")
    public void checkDouble00() {
        checkSimpleEntry(sessionContext, "dbl00", dblInjection, ENTRY_DOUBLE);
    }

    /**
     * @see org.ow2.easybeans.tests.common.ejbs.base.ItfSimpleEnvEntry
     */
    @SuppressWarnings("boxing")
    public void checkByte00() {
        checkSimpleEntry(sessionContext, "bte00", bteInjection, ENTRY_BYTE);

    }

    /**
     * @see org.ow2.easybeans.tests.common.ejbs.base.ItfSimpleEnvEntry
     */
    @SuppressWarnings("boxing")
    public void checkShort00() {
        checkSimpleEntry(sessionContext, "shr00", shrInjection, ENTRY_SHORT);
    }

    /**
     * @see org.ow2.easybeans.tests.common.ejbs.base.ItfSimpleEnvEntry
     */
    @SuppressWarnings("boxing")
    public void checkLong00() {
        checkSimpleEntry(sessionContext, "lng00", lngInjection, ENTRY_LONG);
    }

    /**
     * @see org.ow2.easybeans.tests.common.ejbs.base.ItfSimpleEnvEntry
     */
    @SuppressWarnings("boxing")
    public void checkFloat00() {
        checkSimpleEntry(sessionContext, this.getClass().getName().toString()+"/"+ "fltInjection", fltInjection, ENTRY_FLOAT);
    }

}
